#!/usr/bin/env python2.7
#
# latex-watch
# Sean Bell 2012
#
# Dependencies:
#    latexmk
#    rubber        (recommended)
#    inotify-tools (recommended)
#

import re
import os
import sys
import time
import glob
import signal
from threading import Thread, Lock, Condition


def print_err(s):
    """ Print bold red message """
    print '\033[1;31m%s\033[m' % s


def print_msg(s):
    """ Print yellow message """
    print '\033[33m%s\033[m' % s


def is_ubuntu():
    return "Ubuntu" in os.popen("uname -a").read()


def is_mac():
    return "Darwin" in os.popen("uname -a").read()


def is_cmd(cmd):
    """ Returns true if the command is available to the shell """
    return os.system("command -v %s >/dev/null 2>&1" % cmd.split()[0]) == 0


def has_rubber():
    try:
        import rubber
    except ImportError:
        return False
    try:
        from rubber.cmdline import Main
        return True
    except ImportError:
        print_err("WARNING: rubber is installed, but rubber.cmdline does not "
                  "exist.  This could mean that rubber is installed with BOTH "
                  "apt-get and with pip.  If that is the case, uninstall the pip "
                  "version and only keep the apt-get version.")
        return False


def ensure_cmds(commands):
    """ Makes sure that the given commands are available """
    for cmd in commands:
        if not is_cmd(cmd):
            print_err("Error: could not find %s" % cmd)
            for inst in ['apt-get', 'port', 'brew']:
                if is_cmd(inst):
                    print_err("  --> run '%s install %s'" % (
                        'brew' if inst == 'brew' else 'sudo ' + inst, cmd))
                    break
            exit(1)


def get_dependencies(path):
    """ Returns a set of dependencies """
    deps = set()
    output = os.popen("latexmk -pdf -pdflatex='pdflatex -interaction=nonstopmode' -deps %s 2>/dev/null" % path).read()
    for f in output.replace('\\\n', ' ').split():
        if os.path.isfile(f):
            deps.add(f)
    return deps


def get_compiler():
    """ Returns a function that compiles a list of files """
    if has_rubber():
        def ret(x):
            from rubber.cmdline import Main
            return Main()(['--pdf'] + x)
        print_msg('Compiler: rubber')
        return ret
    elif is_cmd("latexmk"):
        print_msg('Compiler: latexmk')
        return lambda x: 0 == os.system("latexmk -pdf -pdflatex='pdflatex "
                                        "-interaction=nonstopmode' -use-make %s" % ' '.join(x))
    else:
        print_err("Error: no LaTeX make-style compiler")
        if is_ubuntu():
            print_err("Suggested: install rubber with 'sudo apt-get install rubber'")
        elif is_mac():
            print_err(
                "Suggested: install rubber with 'sudo port install rubber'")
        exit(1)


def get_watcher():
    """ Returns a function to watch a list of files """
    #if is_cmd("inotifywait"):
        #output = None
        #try:
            #output = subprocess.check_output("inotifywait 2>&1", shell=True)
        #except subprocess.CalledProcessError as e:
            #if e.output:
                #output = e.output
        #if output.strip() == "No files specified to watch!":
            #print_msg("Watch: inotifywait")
            #return lambda x: os.popen("inotifywait -e close_write %s" % ' '.join(x))

    ## fallback
    #print_msg("Watch: sleep(1) loop")
    #if is_ubuntu():
        #print_err("Suggested: install inotifywait with "
                    #"'sudo apt-get install inotify-tools'")

    def watch(paths):
        files = [File(p) for p in paths]
        while True:
            for f in files:
                if f.changed():
                    return
            time.sleep(1)
    return watch


def get_view_cmd():
    """ Returns a command to view a pdf """
    for cmd in ("evince", "gnome-open", "gvfs-open", "xdg-open", "open -g", "acroread", "xpdf"):
        if is_cmd(cmd):
            print_msg('Viewer: %s' % cmd)
            return cmd
    else:
        print_err("Error: could not find PDF viewer")
        exit(1)


class File:
    """ Helper for watching files """
    def __init__(self, path):
        self._path = path
        if os.path.exists(self._path):
            self._mtime = os.path.getmtime(self._path)
        else:
            self._mtime = None

    def changed(self):
        """ Returns true if the file has changed since the last call """
        if not os.path.exists(self._path):
            return True
        new_mtime = os.path.getmtime(self._path)
        if new_mtime != self._mtime:
            self._mtime = new_mtime
            return True
        return False


class WatcherMonitor():
    def __init__(self):
        self.count = 0
        self.deps = None
        self.lock = Lock()
        self.count_nz = Condition(self.lock)
        self.has_deps = Condition(self.lock)

    def set_deps(self, deps):
        with self.lock:
            self.deps = deps
            self.has_deps.notifyAll()

    def get_deps(self):
        with self.lock:
            while self.deps is None:
                self.has_deps.wait()
            return self.deps

    def inc_count(self):
        with self.lock:
            self.count += 1
            self.count_nz.notifyAll()

    def dec_count(self):
        with self.lock:
            while self.count == 0:
                self.count_nz.wait()
            self.count -= 1


class WatcherThread(Thread):
    def __init__(self, watch, monitor):
        super(WatcherThread, self).__init__()
        self.watch = watch
        self.monitor = monitor

    def run(self):
        while True:
            deps = self.monitor.get_deps()
            self.watch(deps)
            self.monitor.inc_count()


if __name__ == '__main__':
    # fix ctrl+c issues
    signal.signal(signal.SIGINT, lambda x, y: exit(1))

    # fix DISPLAY variable issues
    if 'DISPLAY' not in os.environ:
        print 'setting DISPLAY=":0.0" (was unset)'
        os.environ['DISPLAY'] = ":0.0"

    # make sure we have latexmk and rubber
    ensure_cmds(['latexmk', 'rubber'])

    # parse arguments
    if len(sys.argv) > 1:
        arglist = sys.argv[1:]
    else:
        # otherwise a file designated as latexmain
        arglist = [re.sub(r'\.latexmain$', '', f) for f in glob.glob('*.tex.latexmain')]
        if not arglist:
            # otherwise look for a documentclass file
            arglist = []
            for f in glob.glob('*.tex'):
                for line in open(f):
                    if line.strip().startswith(r'\documentclass'):
                        arglist.append(f)
                        break

    sources = list(set([os.path.splitext(f)[0] + '.tex' for f in arglist]))
    pdfs = [os.path.splitext(f)[0] + '.pdf' for f in sources]

    if len(sources) < 1:
        print_err('\nUsage: %s <file1.tex> [<file2.tex> ...]' % sys.argv[0])
        print_msg(
            'Note: if there is only one .tex file, you can omit the argument')
        exit(1)

    print_msg('Sources: %s' % sources)
    for source in sources:
        if not os.path.exists(source):
            print_err("Error: could not find '%s'" % source)
            exit(1)

    # find commands to use
    make = get_compiler()
    view_cmd = get_view_cmd()
    ubuntu = is_ubuntu()
    watch = get_watcher()

    watcher_monitor = WatcherMonitor()
    watcher_thread = WatcherThread(watch, watcher_monitor)
    watcher_thread.start()

    # go!
    viewed = False
    print ''
    while True:
        make(sources)

        # view pdfs
        if not viewed or view_cmd != 'evince':
            viewed = True
            for f in pdfs:
                if os.system("%s \"%s\" 1>/dev/null 2>/dev/null &" % (view_cmd, f)) != 0:
                    viewed = False

        # compute dependencies
        deps = set()
        for f in sources:
            deps.update(get_dependencies(f))

        watcher_monitor.set_deps(list(deps))
        watcher_monitor.dec_count()

    print_err('Exiting')
